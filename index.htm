<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodedwithChatGPT</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            flex-direction: column;
            min-height: 100vh;
        }

        .section-container {
            width: 100%;
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 20px;
            box-sizing: border-box;
        }

        /* Shared styles */
        h1, h2 {
            margin-bottom: 20px;
            text-align: center;
        }

        /* Drug Interaction Checker styles */
        .interaction-checker {
            background: linear-gradient(135deg, #FFDEE9 0%, #B5FFFC 100%);
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
            text-align: center;
            color: #333;
        }

        .interaction-checker .input-group {
            position: relative;
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .interaction-checker .drug-input {
            width: calc(100% - 50px);
            padding: 10px;
            border: 2px solid #ccc;
            border-radius: 8px;
            outline: none;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .interaction-checker .drug-input:focus {
            border-color: #3498db;
        }

        .interaction-checker .remove-drug {
            margin-left: 10px;
            padding: 10px;
            background-color: #e74c3c;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }

        .interaction-checker .remove-drug:hover {
            background-color: #c0392b;
        }

        .interaction-checker #add-drug, .interaction-checker #reverse-drugs, .interaction-checker #check-interaction {
            margin-top: 10px;
            padding: 12px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
            width: 100%;
        }

        .interaction-checker #add-drug:hover, .interaction-checker #reverse-drugs:hover, .interaction-checker #check-interaction:hover {
            background-color: #2980b9;
        }

        .interaction-checker #reverse-drugs {
            background-color: #f39c12;
        }

        .interaction-checker #reverse-drugs:hover {
            background-color: #e67e22;
        }

        .interaction-checker #check-interaction {
            background-color: #2ecc71;
        }

        .interaction-checker #check-interaction:hover {
            background-color: #27ae60;
        }

        .interaction-checker #results {
            margin-top: 20px;
            padding: 15px;
            background-color: #f7f7f7;
            border-radius: 8px;
            font-size: 16px;
            line-height: 1.5;
            color: #2C3E50;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .interaction-checker .interaction-type {
            font-family: 'Georgia', serif;
            color: #e74c3c;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .interaction-checker .clinical-significance {
            font-family: 'Courier New', monospace;
            color: #3498db;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .interaction-checker .management {
            font-family: 'Verdana', sans-serif;
            color: #27ae60;
            font-weight: bold;
        }

        /* Dose Calculator Aid styles */
        .dose-calculator {
            background: linear-gradient(135deg, #ffcc70 0%, #ff6347 100%);
            padding: 20px 40px;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            color: #fff;
        }

        .dose-calculator h2 {
            font-family: 'Courier New', Courier, monospace;
            font-size: 1.5em;
            margin-bottom: 15px;
            text-align: center;
            color: #ffe600;
        }

        .dose-calculator .input-group {
            margin-bottom: 15px;
        }

        .dose-calculator label {
            font-size: 1.1em;
            margin-bottom: 5px;
            display: block;
        }

        .dose-calculator input[type="text"], .dose-calculator input[type="number"] {
            width: 100%;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #fff;
            background: rgba(255, 255, 255, 0.2);
            color: #fff;
            font-size: 1em;
        }

        .dose-calculator input[type="text"]::placeholder, .dose-calculator input[type="number"]::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }

        .dose-calculator p {
            font-size: 1em;
            margin: 10px 0;
        }

        .dose-calculator #result1, .dose-calculator #result2 {
            color: #00BFFF; /* A shade of blue with good contrast */
            font-weight: bold;
        }

        .dose-calculator #reset-button {
            background-color: #ff6347;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
            margin-top: 20px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .dose-calculator #reset-button:hover {
            background-color: #ff4500;
        }

        /* Responsive design */
        @media (max-width: 767px) {
            .dose-calculator, .interaction-checker {
                margin-bottom: 20px;
                padding: 20px;
            }

            .dose-calculator h1, .interaction-checker h1 {
                font-size: 1.8em;
            }

            .dose-calculator h2, .interaction-checker h2 {
                font-size: 1.2em;
            }

            .dose-calculator input[type="text"], .dose-calculator input[type="number"],
            .interaction-checker .drug-input {
                font-size: 14px;
                padding: 8px;
            }

            .dose-calculator #reset-button, .interaction-checker #add-drug {
                padding: 10px;
                font-size: 14px;
            }
        }
    </style>
</head>
<body>

    <!-- Drug Interaction Checker Section -->
    <div class="section-container">
        <div class="interaction-checker">
            <h1>Drug Interaction Checker</h1>
            <div id="drug-inputs">
                <!-- Input groups will be dynamically added here -->
            </div>
            <button id="add-drug">+</button>
            <button id="reverse-drugs">Reset</button>
            <button id="check-interaction">GO</button>
            <div id="results"></div>
        </div>
    </div>

    <!-- Dose Calculator Aid Section -->
    <div class="section-container">
        <div class="dose-calculator">
            <h1>Dose Calculator Aid</h1>
            <div class="container">
                <div class="section">
                    <h2>mg/mL Calculation</h2>
                    <div class="input-group">
                        <label for="mgml">Enter mg/mL (e.g., 250/5):</label>
                        <input type="text" id="mgml" oninput="calculateMgMl()">
                    </div>
                    <div id="dose-fields">
                        <div class="input-group">
                            <label for="mg">Enter mg dose:</label>
                            <input type="number" id="mg" oninput="calculateMl()">
                        </div>
                        <p>OR</p>
                        <div class="input-group">
                            <label for="ml">Enter mL dose:</label>
                            <input type="number" id="ml" oninput="calculateMg()">
                        </div>
                    </div>
                    <p id="result1"></p>
                </div>

                <div class="section">
                    <h2>mg/kg Calculation</h2>
                    <div class="input-group">
                        <label for="mgkg">Enter mg/kg (e.g., 10/2):</label>
                        <input type="text" id="mgkg" oninput="calculateMgKg()">
                    </div>
                    <div id="weight-fields">
                        <div class="input-group">
                            <label for="mg2">Enter mg:</label>
                            <input type="number" id="mg2" oninput="calculateKg()">
                        </div>
                        <p>OR</p>
                        <div class="input-group">
                            <label for="kg">Enter kg:</label>
                            <input type="number" id="kg" oninput="calculateMg2()">
                        </div>
                    </div>
                    <p id="result2"></p>
                </div>
            </div>
            <button id="reset-button" onclick="resetCalculator()">Reset Calculator</button>
        </div>
    </div>

    <script>
        // Script for Drug Interaction Checker

        let drugData = {}; // This will hold the mapping from drug names to interactions

        // Load and parse the HTML file
        async function loadDrugData(url) {
            const response = await fetch(url);
            const htmlText = await response.text();

            // Parse the HTML and extract drug interaction information
            const parser = new DOMParser();
            const doc = parser.parseFromString(htmlText, 'text/html');
            
            const rows = doc.querySelectorAll('table tr'); // Assuming the data is in a table

            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                if (cells.length === 5) { // Assuming 5 columns: drug1, drug 2, Interaction Type, Clinical Significance, Management
                    const drug1 = cells[0].textContent.trim().toLowerCase();
                    const drug2 = cells[1].textContent.trim().toLowerCase();
                    const interactionType = cells[2].textContent.trim();
                    const clinicalSignificance = cells[3].textContent.trim();
                    const management = cells[4].textContent.trim();

                    // Store interaction information in both directions (drug1 -> drug2 and drug2 -> drug1)
                    if (!drugData[drug1]) drugData[drug1] = {};
                    if (!drugData[drug2]) drugData[drug2] = {};

                    drugData[drug1][drug2] = {
                        interactionType,
                        clinicalSignificance,
                        management
                    };
                    drugData[drug2][drug1] = {
                        interactionType,
                        clinicalSignificance,
                        management
                    };
                }
            });

            // Populate drugNames array after loading the data
            drugNames = Object.keys(drugData);
        }

        // Load the drug interaction data from the provided URL
        loadDrugData('https://reginaldy.github.io/db/');

        // Initialize the drug names array
        let drugNames = [];

        function createDrugInputGroup() {
            let inputGroup = document.createElement('div');
            inputGroup.className = 'input-group';

            let newInput = document.createElement('input');
            newInput.type = 'text';
            newInput.className = 'drug-input';
            newInput.placeholder = 'Enter drug name';
            newInput.setAttribute('oninput', 'showSuggestions(this)');

            let removeButton = document.createElement('button');
            removeButton.innerText = '-';
            removeButton.className = 'remove-drug';
            removeButton.addEventListener('click', function() {
                inputGroup.remove();
            });

            let suggestionsList = document.createElement('ul');
            suggestionsList.className = 'suggestions-list';

            inputGroup.appendChild(newInput);
            inputGroup.appendChild(removeButton);
            inputGroup.appendChild(suggestionsList);

            return inputGroup;
        }

        // Initialize with two input groups
        function initializeDrugInputs() {
            let drugInputs = document.getElementById('drug-inputs');

            // Add the first two input groups
            drugInputs.appendChild(createDrugInputGroup());
            drugInputs.appendChild(createDrugInputGroup());
        }

        // Add event listener for the "+" button to add a new drug input
        document.getElementById('add-drug').addEventListener('click', function() {
            let drugInputs = document.getElementById('drug-inputs');
            drugInputs.appendChild(createDrugInputGroup());
        });

        document.getElementById('reverse-drugs').addEventListener('click', function() {
            resetDrugInputs();
        });

        document.getElementById('check-interaction').addEventListener('click', function() {
            let drugs = [];
            document.querySelectorAll('.drug-input').forEach(input => {
                if (input.value.trim() !== "") {
                    drugs.push(input.value.trim().toLowerCase());
                }
            });

            if (drugs.length < 2) {
                document.getElementById('results').innerText = "Please enter at least two drugs to check interactions.";
                return;
            }

            fetchDrugInteractions(drugs);
        });

        function showSuggestions(inputElement) {
            let inputValue = inputElement.value.toLowerCase();
            let suggestionsList = inputElement.nextElementSibling.nextElementSibling;
            suggestionsList.innerHTML = "";

            if (inputValue.length > 0) {
                let filteredDrugs = drugNames.filter(drug => drug.startsWith(inputValue));

                filteredDrugs.forEach(drug => {
                    let suggestionItem = document.createElement('li');
                    suggestionItem.innerText = drug;
                    suggestionItem.addEventListener('click', function() {
                        inputElement.value = drug;
                        suggestionsList.innerHTML = "";
                    });
                    suggestionsList.appendChild(suggestionItem);
                });
            }
        }

        function fetchDrugInteractions(drugs) {
            let interactionResults = [];

            for (let i = 0; i < drugs.length; i++) {
                for (let j = i + 1; j < drugs.length; j++) {
                    const drug1 = drugs[i];
                    const drug2 = drugs[j];

                    if (drugData[drug1] && drugData[drug1][drug2]) {
                        const interaction = drugData[drug1][drug2];

                        // Replace "Drug 1" and "Drug 2" with the actual drug names
                        const interactionType = interaction.interactionType
                            .replace(/Drug 1/g, drug1)
                            .replace(/Drug 2/g, drug2);

                        interactionResults.push(`
                            <div class="interaction-type">Interaction Type: ${interactionType}</div>
                            <div class="clinical-significance">Clinical Significance: ${interaction.clinicalSignificance}</div>
                            <div class="management">Management: ${interaction.management}</div>
                        `);
                    }
                }
            }

            if (interactionResults.length > 0) {
                document.getElementById('results').innerHTML = interactionResults.join("<hr>");
            } else {
                document.getElementById('results').innerText = "No known interactions found.";
            }
        }

        function resetDrugInputs() {
            const drugInputsContainer = document.getElementById('drug-inputs');
            drugInputsContainer.innerHTML = ''; // Clear all current input groups
            initializeDrugInputs(); // Reinitialize with two input groups
            document.getElementById('results').innerText = ''; // Clear previous results
        }

        // Initialize the page with two input groups
        initializeDrugInputs();

        // Script for Dose Calculator Aid
        function parseFraction(input) {
            let parts = input.split('/');
            if (parts.length === 2) {
                return parseFloat(parts[0]) / parseFloat(parts[1]);
            }
            return parseFloat(input);
        }

        function calculateMgMl() {
            let mgmlInput = document.getElementById('mgml').value;
            let mgml = parseFraction(mgmlInput);
            if (!isNaN(mgml) && mgml > 0) {
                document.getElementById('dose-fields').style.display = 'block';
            } else {
                document.getElementById('dose-fields').style.display = 'none';
                document.getElementById('result1').innerText = '';
            }
        }

        function calculateMl() {
            let mgmlInput = document.getElementById('mgml').value;
            let mgml = parseFraction(mgmlInput);
            let mg = parseFloat(document.getElementById('mg').value);
            if (!isNaN(mgml) && !isNaN(mg) && mgml > 0 && mg > 0) {
                let ml = mg / mgml;
                document.getElementById('result1').innerText = `Equivalent mL dose: ${ml % 1 === 0 ? ml : ml.toFixed(2)} mL`;
            } else {
                document.getElementById('result1').innerText = '';
            }
        }

        function calculateMg() {
            let mgmlInput = document.getElementById('mgml').value;
            let mgml = parseFraction(mgmlInput);
            let ml = parseFloat(document.getElementById('ml').value);
            if (!isNaN(mgml) && !isNaN(ml) && mgml > 0 && ml > 0) {
                let mg = mgml * ml;
                document.getElementById('result1').innerText = `Equivalent mg dose: ${mg % 1 === 0 ? mg : mg.toFixed(2)} mg`;
            } else {
                document.getElementById('result1').innerText = '';
            }
        }

        function calculateMgKg() {
            let mgkgInput = document.getElementById('mgkg').value;
            let mgkg = parseFraction(mgkgInput);
            if (!isNaN(mgkg) && mgkg > 0) {
                document.getElementById('weight-fields').style.display = 'block';
            } else {
                document.getElementById('weight-fields').style.display = 'none';
                document.getElementById('result2').innerText = '';
            }
        }

        function calculateKg() {
            let mgkgInput = document.getElementById('mgkg').value;
            let mgkg = parseFraction(mgkgInput);
            let mg = parseFloat(document.getElementById('mg2').value);
            if (!isNaN(mgkg) && !isNaN(mg) && mgkg > 0 && mg > 0) {
                let kg = mg / mgkg;
                document.getElementById('result2').innerText = `Calculated weight: ${kg % 1 === 0 ? kg : kg.toFixed(2)} kg`;
            } else {
                document.getElementById('result2').innerText = '';
            }
        }

        function calculateMg2() {
            let mgkgInput = document.getElementById('mgkg').value;
            let mgkg = parseFraction(mgkgInput);
            let kg = parseFloat(document.getElementById('kg').value);
            if (!isNaN(mgkg) && !isNaN(kg) && mgkg > 0 && kg > 0) {
                let mg = mgkg * kg;
                document.getElementById('result2').innerText = `Calculated mg: ${mg % 1 === 0 ? mg : mg.toFixed(2)} mg`;
            } else {
                document.getElementById('result2').innerText = '';
            }
        }

        function resetCalculator() {
            document.getElementById('mgml').value = '';
            document.getElementById('mg').value = '';
            document.getElementById('ml').value = '';
            document.getElementById('mgkg').value = '';
            document.getElementById('mg2').value = '';
            document.getElementById('kg').value = '';
            document.getElementById('result1').innerText = '';
            document.getElementById('result2').innerText = '';
            document.getElementById('dose-fields').style.display = 'none';
            document.getElementById('weight-fields').style.display = 'none';
        }
    </script>
</body>
</html>
